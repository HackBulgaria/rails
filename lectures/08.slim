---
layout: lecture
title: Persistence
---

section.center data-background="#000"
  h1.white Persistence

section.center
  h1 Object Relational Mapping

section.center
  p Key idea: The languages for manipulating databases from different vendors vary so we have to abstract them

section.center
  p Key idea: Very good mapping between OO and relational databases

section.center
  p Key idea: Model database relations using object-oriented concepts

section.center
  p Tables become classes

section.center
  p Columns become fields

section.center
  p Rows become instances

section.center
  p We don't write SQL anymore

section.center
  p We create instances, assign fields and invoke methods

section.center
  p Just like the rest of our OO code

section.center
  p Code written this way has no database-specific dependencies

section.center
  p It could as well be working with something different than a traditional database store

section.center
  p The ORM generates and invokes the right commands for each operation we perform so that the underlying adapter could understand it

section.center
  h1 ActiveRecord

section.center
  p: a(href="http://www.martinfowler.com/eaaCatalog/activeRecord.html") PoEAA: Active Record

section.center
  p gem 'activerecord', '~> 4.2.1'

section.center
  p https://github.com/rails/rails/tree/master/activerecord

section.center
  p ORM implementation for Ruby

section.center
  p Alternative to DataMapper

section.center
  p Conventional choice for Rails

section.center
  p Responsible for working with data, validating it and presenting a convinient interface to its user

section.center
  h1 Models

section.center
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
      end

section.center
  p Singular names

section.center
  p Tables have plural names

section.center
  pre
    '
      +------------------------------------------------+
      |                    products                    |
      +------------+-----------+----------+------------+
      | Name       | Brand     | Category | Price      |
      +------------+-----------+----------+------------+
      |            |           |          |            |
      |            |           |          |            |
      +------------+-----------+----------+------------+

section.center
  pre
    '
      Product  -> products
      LineItem -> line_items
      Person   -> people

section.center
  h1 ActiveSupport::Inflector

section.center
  pre: code.ruby
    '
      #--
      # Defines the standard inflection rules. These are the starting point for
      # new projects and are not considered complete. The current set of inflection
      # rules is frozen. This means, we do not change them to become more complete.
      # This is a safety measure to keep existing applications from breaking.
      #++
      module ActiveSupport
        Inflector.inflections(:en) do |inflect|
          inflect.plural(/$/, 's')
          inflect.plural(/s$/i, 's')
          inflect.plural(/^(ax|test)is$/i, '\1es')
          inflect.plural(/(octop|vir)us$/i, '\1i')
          inflect.plural(/(octop|vir)i$/i, '\1i')
          inflect.plural(/(alias|status)$/i, '\1es')
          inflect.plural(/(bu)s$/i, '\1ses')
          inflect.plural(/(buffal|tomat)o$/i, '\1oes')
          # ...

section.center
  p CamelCase vs snake_case

section.center
  h1 Column names

section.center
  p Conventions
  pre
    '
     primary key -> id
     foreign key -> <singular table name>_id (brand_id)

section.center
  p Attributes of the table are available as fields of the object

section.center
  pre: code.ruby
    '
      product = Product.new
      product.name = "The Pragmatic Programmer"

section.center
  p Changing the conventions
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        self.table_name = "items"
        self.primary_key = "item_id"
      end

section.center
  h1 CRUD

section.center
  p Create
  pre: code.ruby
    '
      product = Product.create(name: "Refactoring: Improving the Design of Existing Code")

section.center
  p Create
  pre: code.ruby
    '
      product = Product.create do |p|
        p.name = "Code Complete"
      end

section.center
  p Create
  pre: code.ruby
    '
      product = Product.new
      product.name = "CODE"
      product.save

section.center
  p Create
  pre: code.ruby
    '
      product = Product.new do |p|
        p.name = "Test-Driven Development: By Example"
      end
      product.save

section.center
  p Create
  pre: code.ruby
    '
      product = Product.new do |p|
        p.name = "Structure and Interpretation of Computer Programs"
      end
      product.save

section.center
  p Read all persisted entries
  pre: code.ruby
    '
      all_products = Product.all

section.center
  p Read the first persisted entry
  pre: code.ruby
    '
      first_product = Product.first

section.center
  p Read the first persisted entry meeting a specific criteria
  pre: code.ruby
    '
      first_product_named_refactoring_to_patterns = Product.find_by(name: 'Refactoring to Patterns')

section.center
  p Read all persisted entries meeting a specific criteria
  pre: code.ruby
    '
      products_whys_guide_to_ruby = Product.where(name: "Why's (Poignant) Guide to Ruby")

section.center
  p Update a specific entry
  pre: code.ruby
    '
      product = Product.find_by(name: 'The Art of Computer Programming')
      product.name = 'Design Patterns'
      product.save

section.center
  p Update a specific entry
  pre: code.ruby
    '
      product = Product.find_by(name: 'Concepts, Techniques, and Models of Computer Programming')
      product.update(name: 'Growing Object-Oriented Software, Guided by Tests')

section.center
  p Update all entries
  pre: code.ruby
    '
      Product.update_all "brand = Sony, price = 0"

section.center
  p Delete a specific entry
  pre: code.ruby
    '
      product = Product.find_by(name: 'The Timeless Way of Building')
      product.destroy

section.center
  h1 Migrations

section.center
  p Encapsulate changes to the database schema

section.center
  p A migration captures the difference between two versions of the database schema

section.center
  p An easy way to build the database from ground up

section.center
  p Migrations could be applied in two directions

section.center
  pre: code.ruby
    '
      class CreateProducts < ActiveRecord::Migration
        def change
          create_table :products do |t|
            t.string :name
          end
        end
      end

section.center
  pre: code.ruby
    '
      class ChangeProductsPrice < ActiveRecord::Migration
        def up
          change_table :products do |t|
            t.change :price, :string
          end
        end

        def down
          change_table :products do |t|
            t.change :price, :integer
          end
        end
      end

section.center
  h1 Validations

section.center
  p Validate data before it gets persisted

section.center
  p save and update return false if any validation fails

section.center
  p save! and update! raise ActiveRecord::RecordInvalid exception if any validation fails

section.center
  p #valid? checks if a model passes all of its validations

section.center
  p #invalid? checks if a model does not pass some of its validations

section.center
  p Validating attribute presence
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates :name, presence: true
      end

      Product.create(name: 'Object Oriented Software Engineering: A Use Case Driven Approach').valid? # => true
      Product.create.valid?                                                                           # => false

section.center
  p Validating attribute presence
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates_presence_of :name
      end

      Product.create(name: 'Practical Object-Oriented Design in Ruby').valid? # => true
      Product.create.valid?                                                   # => false

section.center
  p Validating attribute absence
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates :category, absence: true
      end

      Product.create(category: 'Furniture').valid? # => false
      Product.create.valid?                        # => true

section.center
  p Validating attribute absence
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates_absence_of :category
      end

      Product.create(category: 'Furniture').valid? # => false
      Product.create.valid?                        # => true

section.center
  p Validating attribute acceptance
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates :eula, acceptance: true
      end
      Product.create(eula: :accept).valid? # => true
      Product.create.valid?                # => false

section.center
  p Validating attribute acceptance
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates_acceptance_of :eula
      end
      Product.create(eula: :accept).valid? # => true
      Product.create.valid?                # => false

section.center
  p Validating attribute confirmation
  pre: code.ruby
    '
      class User < ActiveRecord::Base
        validates :email, confirmation: true
      end
      User.create(email: 'user@example.org', email_confirmation: 'user@example.org').valid? # => true
      User.create(email: 'user@example.org', email_confirmation: 'test@example.org').valid? # => false
      User.create(email: 'user@example.org').valid?                                         # => true

section.center
  p Validating attribute confirmation
  pre: code.ruby
    '
      class User < ActiveRecord::Base
        validates :email, confirmation: true, presence: true
      end
      User.create(email: 'user@example.org', email_confirmation: 'user@example.org').valid? # => true
      User.create(email: 'user@example.org', email_confirmation: 'test@example.org').valid? # => false
      User.create(email: 'user@example.org').valid?                                         # => false

section.center
  p Validating attribute confirmation
  pre: code.ruby
    '
      class User < ActiveRecord::Base
        validates_confirmation_of :email
        validates :email, presence: true
      end
      User.create(email: 'user@example.org', email_confirmation: 'user@example.org').valid? # => true
      User.create(email: 'user@example.org', email_confirmation: 'test@example.org').valid? # => false
      User.create(email: 'user@example.org').valid?                                         # => false

section.center
  p Validating attribute value exclusion
  pre: code.ruby
    '
      class User < ActiveRecord::Base
        validates :username, exclusion: { in: ['admin', 'test'], message: 'This username is not allowed.' }
      end

section.center
  p Validating attribute value exclusion
  pre: code.ruby
    '
      class User < ActiveRecord::Base
        validates_exclusion_of :age, within: 0..18, message: 'Only adults are allowed.'
      end

section.center
  p Validating attribute value inclusion
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates :category, inclusion: { in: ['books', 'electronics', 'furniture'], message: "%{value} is not a valid category." }
      end

section.center
  p Validating attribute value inclusion
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates_inclusion_of :category, within: ['books', 'electronics', 'furniture'], message: "%{value} is not a valid category."
      end

section.center
  p Validating attribute length
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates :name, length: { minimum: 3, maximum: 15 }
      end

section.center
  p Validating attribute length
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates_length_of :name, in: 3..15
      end

section.center
  p Validating attribute numericality
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates :price, numericality: true
      end

section.center
  p Validating attribute numericality
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates_numericality_of :quantity, only_integer: true
      end

section.center
  p Validating attribute format
  pre: code.ruby
    '
      class Product < ActiveRecord::Base
        validates :name, format: { with: /\A[\d]+-[a-z]+\z/, message: "Name should start with a number followed by letters only." }
      end

section.center
  p Validating attribute format
  pre: code.ruby
    '
      class User < ActiveRecord::Base
        validates_format_of :email, without: /\A.+?@abv\.bg\z/, message: "No abv mails here."
      end

section.center
  p Validating associated models
  pre: code.ruby
    '
      class Brand < ActiveRecord::Base
        has_many :products
        validates_associated :products
      end

section.center
  p Use validates_associated in one of the associated models only!

section.center
  p: a(href="http://guides.rubyonrails.org/active_record_basics.html") ActiveRecord

section.center
  img.inline src="/images/hackman.png"
